function mvpa_run(subject, cond)
    startup_MVPA_Light

    data = load(['../data/preprocessed/mvpa_preprocessing/', subject, ...
        '.mat']);
    data = data.data;
    cond_list = ["isFace", "identity", "meaningfulness", "type", ...
        "location"];
    label_mat = load(['../data/label/', subject, '.mat']);
    label_mat = label_mat.imageseq;
    task = map_label(label_mat);
    task = task(:, cond);
    
    % set classifier
    
	if numel(unique(task)) == 2
        classifier = 'lda';
    else
        classifier = 'multiclass_lda';
    end
    
    % delete NaN labels
    cfg = [];
    cfg.trials = ~isnan(task');
    data = ft_selectdata(cfg, data);
    task(isnan(task)) = [];
    
    % prepare layout
    data.elec.coordsys = 'eeglab';
    cfg = [];
    cfg.elec = data.elec;   
    layout = ft_prepare_layout(cfg);

    % across time
    cfg = [] ;  
    cfg.method = 'mvpa';
    cfg.features = 'chan';
    cfg.mvpa.classifier = classifier;
    cfg.mvpa.metric = 'auc';
    cfg.mvpa.k = 10;
    cfg.design = task;
    stat = ft_timelockstatistics(cfg, data);
    
    save(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_when.mat']);
    mv_plot_result(stat.mvpa, stat.time);
    title([subject, '_', char(cond_list(cond))], 'FontWeight','normal');
    savefig(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_when.fig']);
    
    % across channel
    cfg = [];
    cfg.method = 'triangulation';
    cfg.channel = data.label;
    cfg.elec = data.elec;
    neighbours = ft_prepare_neighbours(cfg);

    cfg = [] ;  
    cfg.method = 'mvpa';
    cfg.latency = [0, 0.3];
    cfg.avgovertime = 'yes';
    cfg.features = 'time';
    cfg.mvpa.classifier = classifier;
    cfg.mvpa.metric = 'auc';
    cfg.mvpa.k = 10;
    cfg.design = task;
    cfg.neighbours  = neighbours;
    stat = ft_timelockstatistics(cfg, data);
  
    save(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_where.mat']);
    cfg = [];
    cfg.parameter = 'auc';
    cfg.layout = layout;
    cfg.colorbar = 'yes';
    cfg.marker = 'labels';
    ft_topoplotER(cfg, stat);
    title([subject, '_', char(cond_list(cond))], 'FontWeight','normal');
    savefig(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_where.fig']);
    
    % both
    cfg = [] ;  
    cfg.method = 'mvpa';
    cfg.features = [];
    cfg.mvpa.classifier = classifier;
    cfg.mvpa.metric = 'auc';
    cfg.mvpa.k = 10;
    cfg.design = task;
    stat = ft_timelockstatistics(cfg, data);
    
    save(['../data/result/mvpa/subject/', subject, '_', ...
    char(cond_list(cond)), '_both.mat']);
    mv_plot_result(stat.mvpa, stat.time);
    title([subject, '_', char(cond_list(cond))], 'FontWeight','normal');
    set(gca, 'YTick', 1:2:length(stat.label), 'YTickLabel', ...
        stat.label(1:2:end));
    savefig(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_both.fig']);
    
    % time*time
    cfg = [] ;  
    cfg.method = 'mvpa';
    cfg.mvpa.classifier = classifier;
    cfg.mvpa.metric = 'auc';
    cfg.mvpa.k = 10;
    cfg.features = 'chan';
    cfg.generalize = 'time';
    cfg.design = task;
    stat = ft_timelockstatistics(cfg, data);
    
    save(['../data/result/mvpa/subject/', subject, '_', ...
    char(cond_list(cond)), '_time.mat']);
    mv_plot_result(stat.mvpa, stat.time, stat.time);
    savefig(['../data/result/mvpa/subject/', subject, '_', ...
        char(cond_list(cond)), '_time.fig']);
end
